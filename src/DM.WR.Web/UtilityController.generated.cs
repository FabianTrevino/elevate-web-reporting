// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace DM.WR.Web.Reskin.Controllers
{
    public partial class UtilityController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected UtilityController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.PartialViewResult> AddReportingKey()
        {
            var callInfo = new T4MVC_System_Web_Mvc_PartialViewResult(Area, Name, ActionNames.AddReportingKey);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.PartialViewResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Navigate()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Navigate);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> WebReports()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WebReports);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public UtilityController Actions { get { return MVC.Utility; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "Utility";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "Utility";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string KeepAlive = "KeepAlive";
            public readonly string DisplayReportingKeyModal = "DisplayReportingKeyModal";
            public readonly string AddReportingKey = "AddReportingKey";
            public readonly string UnderMaintenance = "UnderMaintenance";
            public readonly string Navigate = "Navigate";
            public readonly string WebReports = "WebReports";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string KeepAlive = "KeepAlive";
            public const string DisplayReportingKeyModal = "DisplayReportingKeyModal";
            public const string AddReportingKey = "AddReportingKey";
            public const string UnderMaintenance = "UnderMaintenance";
            public const string Navigate = "Navigate";
            public const string WebReports = "WebReports";
        }


        static readonly ActionParamsClass_AddReportingKey s_params_AddReportingKey = new ActionParamsClass_AddReportingKey();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_AddReportingKey AddReportingKeyParams { get { return s_params_AddReportingKey; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_AddReportingKey
        {
            public readonly string reportingKey = "reportingKey";
        }
        static readonly ActionParamsClass_Navigate s_params_Navigate = new ActionParamsClass_Navigate();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Navigate NavigateParams { get { return s_params_Navigate; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Navigate
        {
            public readonly string to = "to";
        }
        static readonly ActionParamsClass_WebReports s_params_WebReports = new ActionParamsClass_WebReports();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_WebReports WebReportsParams { get { return s_params_WebReports; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_WebReports
        {
            public readonly string reprocess = "reprocess";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _ReportingKeyModal = "_ReportingKeyModal";
                public readonly string UnderMaintenancePage = "UnderMaintenancePage";
            }
            public readonly string _ReportingKeyModal = "~/Reskin/Views/Utility/_ReportingKeyModal.cshtml";
            public readonly string UnderMaintenancePage = "~/Reskin/Views/Utility/UnderMaintenancePage.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_UtilityController : DM.WR.Web.Reskin.Controllers.UtilityController
    {
        public T4MVC_UtilityController() : base(Dummy.Instance) { }

        [NonAction]
        partial void KeepAliveOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult KeepAlive()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.KeepAlive);
            KeepAliveOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void DisplayReportingKeyModalOverride(T4MVC_System_Web_Mvc_PartialViewResult callInfo);

        [NonAction]
        public override System.Web.Mvc.PartialViewResult DisplayReportingKeyModal()
        {
            var callInfo = new T4MVC_System_Web_Mvc_PartialViewResult(Area, Name, ActionNames.DisplayReportingKeyModal);
            DisplayReportingKeyModalOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void AddReportingKeyOverride(T4MVC_System_Web_Mvc_PartialViewResult callInfo, string reportingKey);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.PartialViewResult> AddReportingKey(string reportingKey)
        {
            var callInfo = new T4MVC_System_Web_Mvc_PartialViewResult(Area, Name, ActionNames.AddReportingKey);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "reportingKey", reportingKey);
            AddReportingKeyOverride(callInfo, reportingKey);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.PartialViewResult);
        }

        [NonAction]
        partial void UnderMaintenanceOverride(T4MVC_System_Web_Mvc_PartialViewResult callInfo);

        [NonAction]
        public override System.Web.Mvc.PartialViewResult UnderMaintenance()
        {
            var callInfo = new T4MVC_System_Web_Mvc_PartialViewResult(Area, Name, ActionNames.UnderMaintenance);
            UnderMaintenanceOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void NavigateOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string to);

        [NonAction]
        public override System.Web.Mvc.ActionResult Navigate(string to)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Navigate);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "to", to);
            NavigateOverride(callInfo, to);
            return callInfo;
        }

        [NonAction]
        partial void WebReportsOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string reprocess);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> WebReports(string reprocess)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.WebReports);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "reprocess", reprocess);
            WebReportsOverride(callInfo, reprocess);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
