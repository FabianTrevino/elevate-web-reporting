// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
// 0114: suppress "Foo.BarController.Baz()' hides inherited member 'Qux.BarController.Baz()'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword." when an action (with an argument) overrides an action in a parent controller
#pragma warning disable 1591, 3008, 3009, 0108, 0114
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;
namespace DM.WR.Web.Reskin.Controllers
{
    public partial class DashboardIowaFlexController
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected DashboardIowaFlexController(Dummy d) { }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoute(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToAction(Task<ActionResult> taskResult)
        {
            return RedirectToAction(taskResult.Result);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(ActionResult result)
        {
            var callInfo = result.GetT4MVCResult();
            return RedirectToRoutePermanent(callInfo.RouteValueDictionary);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        protected RedirectToRouteResult RedirectToActionPermanent(Task<ActionResult> taskResult)
        {
            return RedirectToActionPermanent(taskResult.Result);
        }

        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Web.Mvc.ActionResult Index()
        {
            return new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.PartialViewResult> GetFilters()
        {
            var callInfo = new T4MVC_System_Web_Mvc_PartialViewResult(Area, Name, ActionNames.GetFilters);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.PartialViewResult);
        }
        [NonAction]
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public virtual System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> UpdateFilters()
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.UpdateFilters);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public DashboardIowaFlexController Actions { get { return MVC.DashboardIowaFlex; } }
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Area = "";
        [GeneratedCode("T4MVC", "2.0")]
        public readonly string Name = "DashboardIowaFlex";
        [GeneratedCode("T4MVC", "2.0")]
        public const string NameConst = "DashboardIowaFlex";
        [GeneratedCode("T4MVC", "2.0")]
        static readonly ActionNamesClass s_actions = new ActionNamesClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionNamesClass ActionNames { get { return s_actions; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNamesClass
        {
            public readonly string Index = "Index";
            public readonly string GetFilters = "GetFilters";
            public readonly string UpdateFilters = "UpdateFilters";
            public readonly string Print = "Print";
        }

        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionNameConstants
        {
            public const string Index = "Index";
            public const string GetFilters = "GetFilters";
            public const string UpdateFilters = "UpdateFilters";
            public const string Print = "Print";
        }


        static readonly ActionParamsClass_Index s_params_Index = new ActionParamsClass_Index();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Index IndexParams { get { return s_params_Index; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Index
        {
            public readonly string enableQueryLogging = "enableQueryLogging";
        }
        static readonly ActionParamsClass_GetFilters s_params_GetFilters = new ActionParamsClass_GetFilters();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_GetFilters GetFiltersParams { get { return s_params_GetFilters; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_GetFilters
        {
            public readonly string cogat = "cogat";
        }
        static readonly ActionParamsClass_UpdateFilters s_params_UpdateFilters = new ActionParamsClass_UpdateFilters();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_UpdateFilters UpdateFiltersParams { get { return s_params_UpdateFilters; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_UpdateFilters
        {
            public readonly string filterType = "filterType";
            public readonly string values = "values";
        }
        static readonly ActionParamsClass_Print s_params_Print = new ActionParamsClass_Print();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ActionParamsClass_Print PrintParams { get { return s_params_Print; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ActionParamsClass_Print
        {
            public readonly string reportType = "reportType";
            public readonly string input = "input";
        }
        static readonly ViewsClass s_views = new ViewsClass();
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public ViewsClass Views { get { return s_views; } }
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public class ViewsClass
        {
            static readonly _ViewNamesClass s_ViewNames = new _ViewNamesClass();
            public _ViewNamesClass ViewNames { get { return s_ViewNames; } }
            public class _ViewNamesClass
            {
                public readonly string _Filter_PiledItems = "_Filter_PiledItems";
                public readonly string _FiltersPanel = "_FiltersPanel";
                public readonly string _ProfileNarrativeDomain = "_ProfileNarrativeDomain";
                public readonly string DashboardPage = "DashboardPage";
                public readonly string DashboardPdfPage = "DashboardPdfPage";
                public readonly string ProfileDifferentiatedKto1Page = "ProfileDifferentiatedKto1Page";
                public readonly string ProfileNarrativeKto1Page = "ProfileNarrativeKto1Page";
                public readonly string ProfileNarrativePage = "ProfileNarrativePage";
                public readonly string StudentProfilePage = "StudentProfilePage";
            }
            public readonly string _Filter_PiledItems = "~/Reskin/Views/DashboardIowaFlex/_Filter_PiledItems.cshtml";
            public readonly string _FiltersPanel = "~/Reskin/Views/DashboardIowaFlex/_FiltersPanel.cshtml";
            public readonly string _ProfileNarrativeDomain = "~/Reskin/Views/DashboardIowaFlex/_ProfileNarrativeDomain.cshtml";
            public readonly string DashboardPage = "~/Reskin/Views/DashboardIowaFlex/DashboardPage.cshtml";
            public readonly string DashboardPdfPage = "~/Reskin/Views/DashboardIowaFlex/DashboardPdfPage.cshtml";
            public readonly string ProfileDifferentiatedKto1Page = "~/Reskin/Views/DashboardIowaFlex/ProfileDifferentiatedKto1Page.cshtml";
            public readonly string ProfileNarrativeKto1Page = "~/Reskin/Views/DashboardIowaFlex/ProfileNarrativeKto1Page.cshtml";
            public readonly string ProfileNarrativePage = "~/Reskin/Views/DashboardIowaFlex/ProfileNarrativePage.cshtml";
            public readonly string StudentProfilePage = "~/Reskin/Views/DashboardIowaFlex/StudentProfilePage.cshtml";
        }
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public partial class T4MVC_DashboardIowaFlexController : DM.WR.Web.Reskin.Controllers.DashboardIowaFlexController
    {
        public T4MVC_DashboardIowaFlexController() : base(Dummy.Instance) { }

        [NonAction]
        partial void IndexOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string enableQueryLogging);

        [NonAction]
        public override System.Web.Mvc.ActionResult Index(string enableQueryLogging)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Index);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "enableQueryLogging", enableQueryLogging);
            IndexOverride(callInfo, enableQueryLogging);
            return callInfo;
        }

        [NonAction]
        partial void GetFiltersOverride(T4MVC_System_Web_Mvc_PartialViewResult callInfo, string cogat);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.PartialViewResult> GetFilters(string cogat)
        {
            var callInfo = new T4MVC_System_Web_Mvc_PartialViewResult(Area, Name, ActionNames.GetFilters);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "cogat", cogat);
            GetFiltersOverride(callInfo, cogat);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.PartialViewResult);
        }

        [NonAction]
        partial void UpdateFiltersOverride(T4MVC_System_Web_Mvc_JsonResult callInfo, string filterType, System.Collections.Generic.List<string> values);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.JsonResult> UpdateFilters(string filterType, System.Collections.Generic.List<string> values)
        {
            var callInfo = new T4MVC_System_Web_Mvc_JsonResult(Area, Name, ActionNames.UpdateFilters);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "filterType", filterType);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "values", values);
            UpdateFiltersOverride(callInfo, filterType, values);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.JsonResult);
        }

        [NonAction]
        partial void PrintOverride(T4MVC_System_Web_Mvc_ActionResult callInfo);

        [NonAction]
        public override System.Web.Mvc.ActionResult Print()
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Print);
            PrintOverride(callInfo);
            return callInfo;
        }

        [NonAction]
        partial void PrintOverride(T4MVC_System_Web_Mvc_ActionResult callInfo, string reportType, string input);

        [NonAction]
        public override System.Threading.Tasks.Task<System.Web.Mvc.ActionResult> Print(string reportType, string input)
        {
            var callInfo = new T4MVC_System_Web_Mvc_ActionResult(Area, Name, ActionNames.Print);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "reportType", reportType);
            ModelUnbinderHelpers.AddRouteValues(callInfo.RouteValueDictionary, "input", input);
            PrintOverride(callInfo, reportType, input);
            return System.Threading.Tasks.Task.FromResult(callInfo as System.Web.Mvc.ActionResult);
        }

    }
}

#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108, 0114
